name: Android CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set version based on git tag or date
        id: set_version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            # For tagged releases, use the tag as version
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "VERSION_CODE=$(echo $VERSION | sed 's/\.//g')" >> $GITHUB_OUTPUT
          else
            # For non-tagged builds, use date-based version
            DATE=$(date +'%y%m%d')
            BUILD_NUMBER=${GITHUB_RUN_NUMBER:-1}
            VERSION="1.0.0-SNAPSHOT-$DATE-$BUILD_NUMBER"
            VERSION_CODE="$(date +'%y%m%d')01"
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
            echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_OUTPUT
          fi
          echo "Using version: $VERSION ($VERSION_CODE)"

      - name: Update version in build.gradle.kts
        run: |
          VERSION="${{ steps.set_version.outputs.VERSION }}"
          VERSION_CODE="${{ steps.set_version.outputs.VERSION_CODE }}"
          sed -i "s/versionCode = 1/versionCode = $VERSION_CODE/" app/build.gradle.kts
          sed -i "s/versionName = \"1.0\"/versionName = \"$VERSION\"/" app/build.gradle.kts
          cat app/build.gradle.kts | grep "versionCode\|versionName"

      - name: Build with Gradle
        run: ./gradlew build

      - name: Run unit tests
        run: ./gradlew test

  instrumented-tests:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run instrumented tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: x86_64
          profile: Nexus 6
          script: ./gradlew connectedAndroidTest

  release:
    needs: [build, instrumented-tests]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build release APK
        run: ./gradlew assembleRelease

      - name: Sign APK
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: app/build/outputs/apk/release
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: false

      - name: Upload Release APK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.sign_app.outputs.signedReleaseFile }}
          asset_name: indoor-positioning-app-${{ steps.get_version.outputs.VERSION }}.apk
          asset_content_type: application/vnd.android.package-archive